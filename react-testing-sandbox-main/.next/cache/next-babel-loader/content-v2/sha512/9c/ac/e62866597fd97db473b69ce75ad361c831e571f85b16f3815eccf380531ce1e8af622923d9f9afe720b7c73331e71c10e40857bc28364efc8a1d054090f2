{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/matsudatomoyuki/programming/js_practice/React-pra/react-testing-sandbox-main/src/context/AlertContext.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createContext, useCallback, useContext, useReducer } from \"react\";\nconst initialState = {\n  show: false,\n  message: \"\"\n};\nconst alertStateContext = /*#__PURE__*/createContext(initialState);\nconst alertDispatchContext = /*#__PURE__*/createContext({\n  showDispatcher: () => void 0,\n  hideDispatcher: () => void 0\n});\nexport const useAlertState = () => useContext(alertStateContext);\nexport const useAlertDispatch = () => useContext(alertDispatchContext);\nexport function AlertProvider({\n  children\n}) {\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(reducer, initialState);\n  const showDispatcher = useCallback(message => dispatch(showAlert(message)), []);\n  const hideDispatcher = useCallback(() => dispatch(hideAlert()), []);\n  return /*#__PURE__*/_jsxDEV(alertStateContext.Provider, {\n    value: state,\n    children: /*#__PURE__*/_jsxDEV(alertDispatchContext.Provider, {\n      value: {\n        showDispatcher,\n        hideDispatcher\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"ui/alert:show\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        show: true,\n        message: action.payload.message\n      });\n\n    case \"ui/alert:hide\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        show: false\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction showAlert(message) {\n  return {\n    type: \"ui/alert:show\",\n    payload: {\n      message\n    }\n  };\n}\n\nfunction hideAlert() {\n  return {\n    type: \"ui/alert:hide\"\n  };\n}","map":{"version":3,"sources":["/Users/matsudatomoyuki/programming/js_practice/React-pra/react-testing-sandbox-main/src/context/AlertContext.tsx"],"names":["createContext","useCallback","useContext","useReducer","initialState","show","message","alertStateContext","alertDispatchContext","showDispatcher","hideDispatcher","useAlertState","useAlertDispatch","AlertProvider","children","state","dispatch","reducer","showAlert","hideAlert","action","type","payload"],"mappings":";;;;;;;;;AAAA,SAASA,aAAT,EAAwBC,WAAxB,EAAqCC,UAArC,EAAiDC,UAAjD,QAAmE,OAAnE;AAUA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,KADa;AAEnBC,EAAAA,OAAO,EAAE;AAFU,CAArB;AAIA,MAAMC,iBAAiB,gBAAGP,aAAa,CAAaI,YAAb,CAAvC;AACA,MAAMI,oBAAoB,gBAAGR,aAAa,CAAgB;AACxDS,EAAAA,cAAc,EAAE,MAAM,KAAK,CAD6B;AAExDC,EAAAA,cAAc,EAAE,MAAM,KAAK;AAF6B,CAAhB,CAA1C;AAKA,OAAO,MAAMC,aAAa,GAAG,MAAMT,UAAU,CAACK,iBAAD,CAAtC;AACP,OAAO,MAAMK,gBAAgB,GAAG,MAAMV,UAAU,CAACM,oBAAD,CAAzC;AAEP,OAAO,SAASK,aAAT,CAAuB;AAAEC,EAAAA;AAAF,CAAvB,EAAgF;AACrF,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBb,UAAU,CAACc,OAAD,EAAUb,YAAV,CAApC;AACA,QAAMK,cAAc,GAAGR,WAAW,CAAEK,OAAD,IAAqBU,QAAQ,CAACE,SAAS,CAACZ,OAAD,CAAV,CAA9B,EAAoD,EAApD,CAAlC;AACA,QAAMI,cAAc,GAAGT,WAAW,CAAC,MAAMe,QAAQ,CAACG,SAAS,EAAV,CAAf,EAA8B,EAA9B,CAAlC;AACA,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAEJ,KAAnC;AAAA,2BACE,QAAC,oBAAD,CAAsB,QAAtB;AAA+B,MAAA,KAAK,EAAE;AAAEN,QAAAA,cAAF;AAAkBC,QAAAA;AAAlB,OAAtC;AAAA,gBACGI;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;AAID,SAASG,OAAT,CAAiBF,KAAjB,EAAoCK,MAApC,EAAyD;AACvD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,eAAL;AACE,6CACKN,KADL;AAEEV,QAAAA,IAAI,EAAE,IAFR;AAGEC,QAAAA,OAAO,EAAEc,MAAM,CAACE,OAAP,CAAehB;AAH1B;;AAKF,SAAK,eAAL;AACE,6CACKS,KADL;AAEEV,QAAAA,IAAI,EAAE;AAFR;;AAIF;AACE,aAAOU,KAAP;AAbJ;AAeD;;AAED,SAASG,SAAT,CAAmBZ,OAAnB,EAAoC;AAClC,SAAO;AACLe,IAAAA,IAAI,EAAE,eADD;AAELC,IAAAA,OAAO,EAAE;AACPhB,MAAAA;AADO;AAFJ,GAAP;AAMD;;AAED,SAASa,SAAT,GAAqB;AACnB,SAAO;AACLE,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD","sourcesContent":["import { createContext, useCallback, useContext, useReducer } from \"react\"\n\ntype AlertState = {\n  show: boolean\n  message: string\n}\ntype AlertDispatch = {\n  showDispatcher: (message: string) => void\n  hideDispatcher: () => void\n}\nconst initialState = {\n  show: false,\n  message: \"\"\n}\nconst alertStateContext = createContext<AlertState>(initialState)\nconst alertDispatchContext = createContext<AlertDispatch>({\n  showDispatcher: () => void 0,\n  hideDispatcher: () => void 0\n})\n\nexport const useAlertState = () => useContext(alertStateContext)\nexport const useAlertDispatch = () => useContext(alertDispatchContext)\n\nexport function AlertProvider({ children }: { children: JSX.Element[] | JSX.Element }) {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const showDispatcher = useCallback((message: string) => dispatch(showAlert(message)), [])\n  const hideDispatcher = useCallback(() => dispatch(hideAlert()), [])\n  return (\n    <alertStateContext.Provider value={state}>\n      <alertDispatchContext.Provider value={{ showDispatcher, hideDispatcher }}>\n        {children}\n      </alertDispatchContext.Provider>\n    </alertStateContext.Provider>\n  )\n}\n\ntype AlertAction = ReturnType<typeof showAlert> | ReturnType<typeof hideAlert>\n\nfunction reducer(state: AlertState, action: AlertAction) {\n  switch (action.type) {\n    case \"ui/alert:show\":\n      return {\n        ...state,\n        show: true,\n        message: action.payload.message\n      }\n    case \"ui/alert:hide\":\n      return {\n        ...state,\n        show: false\n      }\n    default:\n      return state\n  }\n}\n\nfunction showAlert(message: string) {\n  return {\n    type: \"ui/alert:show\",\n    payload: {\n      message\n    }\n  } as const\n}\n\nfunction hideAlert() {\n  return {\n    type: \"ui/alert:hide\"\n  } as const\n}\n"]},"metadata":{},"sourceType":"module"}